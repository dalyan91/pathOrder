<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Helper\Traits\RepositoryOrdeByTrait;
use AppBundle\Helper\Traits\RepositoryPaginationTrait;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository  extends EntityRepository
{
    use RepositoryPaginationTrait;
    use RepositoryOrdeByTrait;

    /**
     * @param array|null $orderBy
     * @param null $limit
     * @param int $offset
     * @return mixed
     */
    public function findCategorys(array $orderBy = null, $limit = null, $offset = 0)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Category', 'c')
        ;
        $this->initOrderBy($query, $orderBy);
        $this->initPagination($query, $limit, $offset);
        return $query->getQuery()->getResult();

    }

    /**
     * @param $id
     * @return Category
     * @throws NonUniqueResultException
     */
    public function findCategoryById($id)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Category', 'c')
            ->where('c.id=:id')
            ->setParameter('id',$id)
        ;
        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @return int
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function countCategory(){
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(c.id)')
            ->from('AppBundle:Category', 'c')
        ;

        return $query->getQuery()->getSingleScalarResult();
    }
}
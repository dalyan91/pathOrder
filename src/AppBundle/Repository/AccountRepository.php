<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Account;
use AppBundle\Helper\Traits\RepositoryOrdeByTrait;
use AppBundle\Helper\Traits\RepositoryPaginationTrait;

/**
 * AccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryOrdeByTrait;
    use RepositoryPaginationTrait;

    /**
     * Find account by session token.
     *
     * @param $token
     * @return Account
     */
    public function loadAccountBySessionToken($token)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('account')
            ->from('AppBundle:Account', 'account')
            ->where('account.sessionToken = :token')
            ->andWhere('account.active = 1')
            ->setParameter('token', $token)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Find account by reset password token.
     *
     * @param $token
     * @return Account
     */
    public function loadAccountByPasswordToken($token)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('account')
            ->from('AppBundle:Account', 'account')
            ->where('account.resetPasswordToken = :token')
            ->andWhere('account.active = 1')
            ->setParameter('token', $token)
            ->getQuery()
            ->getOneOrNullResult();
    }


    /**
     * Force Find account
     *
     * @param $accountId
     * @return Account
     */
    public function forceFindAccountById($accountId)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('account')
            ->from('AppBundle:Account', 'account')
            ->where('account.id = :id')
            ->setParameter('id', $accountId);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function fetchAccounts(array $orderBy = null, $limit = null, $offset = 0)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('a')
            ->from('AppBundle:Account', 'a')
        ;
        $this->initOrderBy($query, $orderBy);
        $this->initPagination($query, $limit, $offset);
        return $query->getQuery()->getResult();
    }

    public function getAccountCount(){
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(a.id)')
            ->from('AppBundle:Account', 'a')
        ;
        return $query->getQuery()->getSingleScalarResult();
    }

    public function checkEmailExists($email){
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(a.id)')
            ->from('AppBundle:Account', 'a')
            ->where('a.email = :email')
            ->setParameter('email', $email)
        ;
        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Find account by email.
     *
     * @param $email
     * @return Account
     */
    public function loadAccountByEmail($email)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('account')
            ->from('AppBundle:Account', 'account')
            ->where('account.email = :email')
            ->andWhere('account.active = 1')
            ->setParameter('email', $email)
            ->getQuery()
            ->getOneOrNullResult();
    }

}
